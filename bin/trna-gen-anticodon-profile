#!/usr/bin/env python
# -*- coding: utf-8

import os
import sys
import argparse
import collections

import tRNASeqTools
import tRNASeqTools.dbops as dbops
import tRNASeqTools.utils as utils
import tRNASeqTools.terminal as terminal

from tRNASeqTools.errors import ConfigError


__author__ = "Steven Cui"
__copyright__ = "Copyright 2017, Meren Lab"
__credits__ = []
__license__ = "GPL 3.0"
__version__ = tRNASeqTools.__version__
__maintainer__ = "A. Murat Eren"
__email__ = "a.murat.eren@gmail.com"


run = terminal.Run()
progress = terminal.Progress()
pp = terminal.pretty_print


def main(args):
    if os.path.exists(args.output_path):
        os.remove(args.output_path)

    sample_names = [dbops.tRNADatabase(p).meta['sample_name'] for p in args.profiles]
    if len(sample_names) != len(set(sample_names)):
        raise ConfigError("Every profile database needs to have a unique name. But it is not the case\
                           (which means you have more than one profile db with identical name in this\
                           list).")

    anticodon_profile_dict = {}
    for sample_name in sample_names:
        anticodon_profile_dict[sample_name] = {}

    for profile_path in args.profiles:
        profile_db = dbops.tRNADatabase(profile_path)
        sample_name = profile_db.meta['sample_name']

    progress.new('Generating anti-codon profiles')
    for profile_path in args.profiles:
        profile_db = dbops.tRNADatabase(profile_path)
        sample_name = profile_db.meta['sample_name']
        total_reads = profile_db.stats['total_passed']

        progress.update("Working on '%s' with %s sequences ..." % (sample_name, pp(total_reads)))
        anticodon_profile = profile_db.gen_anticodon_profile(args.only_full_length,
                                                             args.min_seq_length,
                                                             args.max_seq_length,
                                                             args.anticodons)

        for key in anticodon_profile.keys():
            anticodon_profile_dict[sample_name][key] = anticodon_profile[key]

    all_anticodons_frequency_dict = collections.Counter()
    for anticodon_frequencies_dict in anticodon_profile_dict.values():
        for anticodon in list(anticodon_frequencies_dict.keys()):
            all_anticodons_frequency_dict[anticodon] += anticodon_frequencies_dict[anticodon]

    all_anticodons_sorted = [tpl[0] for tpl in all_anticodons_frequency_dict.most_common()]

    for sample_name in anticodon_profile_dict:
        for anticodon in all_anticodons_sorted:
            if anticodon not in anticodon_profile_dict[sample_name]:
                anticodon_profile_dict[sample_name][anticodon] = 0


    progress.end()

    if args.percent_normalize:
        percent_normalized_dict = {}

        for sample_name in anticodon_profile_dict:
            percent_normalized_dict[sample_name] = {}
            total = sum(anticodon_profile_dict[sample_name].values())
            for anticodon in anticodon_profile_dict[sample_name]:
                percent_normalized_dict[sample_name][anticodon] = anticodon_profile_dict[sample_name][anticodon] * 100 / total

        utils.store_dict_as_TAB_delimited_file(percent_normalized_dict, args.output_path, headers=['sample_name'] + all_anticodons_sorted)
    else:
        utils.store_dict_as_TAB_delimited_file(anticodon_profile_dict, args.output_path, headers=['sample_name'] + all_anticodons_sorted)

    run.info('Anti-codon profile', args.output_path)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="create anticodon profile\
         from one or many tRNA profiles")
    parser.add_argument("profiles", nargs="*", help="name of read file")
    parser.add_argument("-o", "--output_path", help="output path (path where\
        output will be redirected")
    parser.add_argument("--only-full-length", help="only consider full-length\
        sequences", action="store_true")
    parser.add_argument("--percent-normalize", action="store_true", help="Percent\
                normalize anticodon counts per sample")
    parser.add_argument("--min-seq-length", action="store", type=int, 
        help="set a minimum sequence length")
    parser.add_argument("--max-seq-length", action="store", type=int, 
        help="set a maximum sequence length")
    parser.add_argument("--anticodons", action = "store", help="optional\
        specific anticodons(comma-separated) to search for")

    args = parser.parse_args()
    
    try:
        main(args)
    except ConfigError as e:
        print(e)
        sys.exit(-1)
        
